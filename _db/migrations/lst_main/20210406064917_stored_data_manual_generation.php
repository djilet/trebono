<?php

use Phinx\Migration\AbstractMigration;
use Phinx\Util\Literal;

class StoredDataManualGeneration extends AbstractMigration
{
    private $langVarList = array();

    public function init()
    {
        $this->langVarList[] = new LangVar("de", "template", "billing", "stored_data_list.html", "Cron", "Erzeugt durch trebono");
        $this->langVarList[] = new LangVar("en", "template", "billing", "stored_data_list.html", "Cron", "Generated by trebono");
        $this->langVarList[] = new LangVar("tr", "template", "billing", "stored_data_list.html", "Cron", "Erzeugt durch trebono");

        $this->langVarList[] = new LangVar("de", "template", "billing", "stored_data_list.html", "GenerationFrequency", "Dateitypen");
        $this->langVarList[] = new LangVar("en", "template", "billing", "stored_data_list.html", "GenerationFrequency", "Type of file");
        $this->langVarList[] = new LangVar("tr", "template", "billing", "stored_data_list.html", "GenerationFrequency", "Dateitypen");

        $this->langVarList[] = new LangVar("de", "template", "billing", "stored_data_list.html", "Monthly", "Monatlich");
        $this->langVarList[] = new LangVar("en", "template", "billing", "stored_data_list.html", "Monthly", "Monthly");
        $this->langVarList[] = new LangVar("tr", "template", "billing", "stored_data_list.html", "Monthly", "Monatlich");

        $this->langVarList[] = new LangVar("de", "template", "billing", "stored_data_list.html", "Quarterly", "Quartal");
        $this->langVarList[] = new LangVar("en", "template", "billing", "stored_data_list.html", "Quarterly", "Quarterly");
        $this->langVarList[] = new LangVar("tr", "template", "billing", "stored_data_list.html", "Quarterly", "Quartal");

        $this->langVarList[] = new LangVar("de", "template", "billing", "stored_data_list.html", "Yearly", "J채hrlich");
        $this->langVarList[] = new LangVar("en", "template", "billing", "stored_data_list.html", "Yearly", "Yearly");
        $this->langVarList[] = new LangVar("tr", "template", "billing", "stored_data_list.html", "Yearly", "J채hrlich");

        $this->langVarList[] = new LangVar("de", "template", "billing", "stored_data_list.html", "GenerateButton", "Exportdateien generieren");
        $this->langVarList[] = new LangVar("en", "template", "billing", "stored_data_list.html", "GenerateButton", "Generate export files");
        $this->langVarList[] = new LangVar("tr", "template", "billing", "stored_data_list.html", "GenerateButton", "Exportdateien generieren");

        $this->langVarList[] = new LangVar("de", "php", "billing", "common", "stored-data-already-formed-error", "Die Archive wurden bereits fr체her gebildet:");
        $this->langVarList[] = new LangVar("en", "php", "billing", "common", "stored-data-already-formed-error", "The archives have already been formed earlier:");
        $this->langVarList[] = new LangVar("tr", "php", "billing", "common", "stored-data-already-formed-error", "Die Archive wurden bereits fr체her gebildet:");

        $this->langVarList[] = new LangVar("de", "php", "billing", "common", "all-employee", "alle Mitarbeiter");
        $this->langVarList[] = new LangVar("en", "php", "billing", "common", "all-employee", "all employee");
        $this->langVarList[] = new LangVar("tr", "php", "billing", "common", "all-employee", "alle Mitarbeiter");
    }

    public function up()
    {
        foreach ($this->langVarList as $langVar) {
            $query = $langVar->GetInsertQuery();
            $this->execute($query);
        }

        $this->table("stored_data")
            ->addColumn("cron", Literal::from("flag"), ["null" => false, "default" => "Y"])
            ->save();
    }

    public function down()
    {
        foreach ($this->langVarList as $langVar) {
            $query = $langVar->GetDeleteQuery();
            $this->execute($query);
        }

        $this->table("stored_data")
            ->removeColumn("cron")
            ->save();
    }
}
